 CMake 

1.构建命令
  1.1. cmake S <源目录> B <构建目录>
    S <源目录>：指定包含 CMakeLists.txt 的源码目录。
    B <构建目录>：指定构建输出目录（如 build/）。
    短命令 cmake <源目录>

  1.2. cmake build <构建目录>
    编译项目，根据配置生成的构建系统文件（如 Makefile）执行编译。

  1.3 指定的生成器
    cmake -G 显示可用的生成器
    cmake -G "<生成器>" S <源目录> B <构建目录> 使用指定的生成器
    
可选参数：
  -j N：并行编译（N 为 CPU 核心数）。
  target <目标名>：编译指定目标（如 all、clean）。
    

3. 其他常见命令

  3.1 配置项目
  cmake S . B build  
    在当前目录（.）配置构建目录 build/。
  cmake DCMAKE_BUILD_TYPE=Debug S . B build  
    设置构建类型为 Debug（默认为 Release）。
  cmake DCMAKE_INSTALL_PREFIX=/usr/local S . B build  
    指定安装路径为 /usr/local。

  3.2 构建与安装
  make  
    在构建目录中直接运行 make（需先通过 cmake 生成 Makefile）。
  make install  
    安装编译后的文件到 CMAKE_INSTALL_PREFIX 指定的路径。

  3.3 清理构建
  make clean  
    清理构建目录中的编译文件。
  rm rf build/  
    彻底删除构建目录（重新配置时需重新运行 cmake）。

  3.4 查看 CMake 版本
      bash
      cmake version

  3.5 图形化配置工具
    ccmake .  
      在命令行中交互式配置项目（支持上下键选择参数）。
    cmakegui  
      图形界面工具，直观设置变量和生成构建系统。

4. CMake 工作流程
  1. 配置（Configuration）  
    运行 cmake S <源目录> B <构建目录>，生成构建系统文件（如 Makefile）。
  2. 构建（Build）  
    运行 cmake build <构建目录> 或 make，编译源码生成可执行文件或库。
  3. 安装（Install）  
    运行 make install，将编译结果安装到指定目录。

5. 示例：完整流程
  1. 创建构建目录
    mkdir build && cd build
  2. 配置项目
    cmake S ../source B . DCMAKE_BUILD_TYPE=Debug
  3. 编译项目
    cmake build . j 8
  4. 安装（可选）
    make install

6. 常见 CMakeLists.txt 命令
  cmake_minimum_required(VERSION 3.10)  
  指定最低 CMake 版本要求。
    project(MyProject)  
  定义项目名称。
    add_executable(myapp main.cpp)  
  生成可执行文件 myapp。
    add_library(mylib STATIC src/lib.cpp)  
  生成静态库 libmylib.a。
    target_include_directories(myapp PUBLIC include/)  
  为 myapp 添加头文件路径。
    target_link_libraries(myapp mylib)  
  将 mylib 链接到 myapp。

7. 注意事项
  跨平台支持：CMake 可生成不同平台的构建文件（如 Linux 的 Makefile、Windows 的 Visual Studio 项目）。
  变量传递：通过 DVAR=value 传递变量（如 DCMAKE_CXX_STANDARD=17）。
  依赖管理：使用 find_package 查找外部依赖库（如 find_package(fmt REQUIRED)）。

  export LD_LIBRARY_PATH=<路径> 在运行时指定动态链接库的搜索路径。
  ldd <可执行文件> 查看可执行文件依赖的动态链接库。

  单行注释 #
  多行注释 #[[ 注释内容 ]]

8. 日志输出
  日志格式 message(<日志级别> <消息内容>)
  日志级别：
    FATAL_ERROR ：致命错误，终止配置 
    SEND_ERROR : cmake 继续运行，但是跳过生成
    WARNING ：警告信息
    NOTICE ：通知信息 (默认)
    STATUS ：普通信息
    # 下面的默认不会显示
    VERBOSE ：详细信息
    DEBUG ：调试信息
    TRACE ：跟踪信息
  指定显示的日志级别：(cmake ..) --log-level=<级别>

  查找外部依赖库提示
    message(CHECK_START "Checking for fmt library")
    message(CHECK_PASS "Found fmt library: ${fmt_LIBRARIES}")
    message(CHECK_FAIL "Could not find fmt library")

  设置嵌套消息缩进
    set(CMAKE_MESSAGE_INDENT "  ")  # 设置缩进为2个空格
    set(CMAKE_MESSAGE_INDENT "--")  # 设置缩进为 --

  颜色设置
    string(ASCII 27 ESCAPE)
    set(COLOR_RED "${ESCAPE}[31m")
    message("${COLOR_RED}This is red text${COLOR_END}")
  

9.变量 (本质上都是字符串)
  CMake 中的变量可以通过 set() 命令定义和修改，通过unset() 删除。
  变量可以是全局的或缓存的，缓存变量在 CMake GUI 或 ccmake 中可见。
    set(VAR_NAME "value")  
      定义一个变量 VAR_NAME，其值为 "value"。
    set(VAR_NAME "new_value" CACHE STRING "描述信息")  
      修改变量 VAR_NAME 的值，并将其存储在缓存中。缓存文件如果不删除，下次运行 CMake 时可以自动读取和复用这些变量的值。
  获取变量值 ${VAR_NAME}，可以嵌套使用，未设置的变量为空字符串。
  CMake内置变量
    CMAKE_SOURCE_DIR：项目的源代码目录。
    CMAKE_BINARY_DIR：构建目录。
    CMAKE_CURRENT_SOURCE_DIR：当前处理的源代码目录。
    CMAKE_CURRENT_BINARY_DIR：当前处理的构建目录。
    CMAKE_CXX_COMPILER：C++ 编译器路径。
    CMAKE_BUILD_TYPE：当前构建类型（如 Debug、Release）。
    CMAKE_INSTALL_PREFIX：安装路径。
